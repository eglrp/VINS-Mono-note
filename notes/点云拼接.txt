/*************  ROS 可视化(一)： 发布PointCloud2点云数据到Rviz  ***************
	    > https://www.cnblogs.com/lvchaoshun/p/9961112.html
	    > 
	    > 
	    > 
	    > 
 ****************************************************************************/

CMakeLists.txt
	find_package(PCL REQUIRED)
	include_directories(include${PCL_INCLUDE_DIRS})
	link_directories(${PCL_LIBRARY_DIRS})
	add_executable(pcl_create src/pcl_create.cpp)
	target_link_libraries(pcl_create ${catkin_LIBRARIES} ${PCL_LIBRARIES}) 



#include <ros/ros.h>
#include <pcl/point_cloud.h>
#include <pcl_conversions/pcl_conversions.h>
#include <sensor_msgs/PointCloud2.h>
 
main (int argc, char **argv)
{
    ros::init (argc, argv, "pcl_create");
 
    ros::NodeHandle nh;
    ros::Publisher pcl_pub = nh.advertise<sensor_msgs::PointCloud2> ("pcl_output", 1);
    pcl::PointCloud<pcl::PointXYZ> cloud;
    sensor_msgs::PointCloud2 output;
 
    // Fill in the cloud data
    cloud.width  = 100;
    cloud.height = 1;
    cloud.points.resize(cloud.width * cloud.height);
 
    for (size_t i = 0; i < cloud.points.size (); ++i)
    {
        cloud.points[i].x = 1024 * rand () / (RAND_MAX + 1.0f);
        cloud.points[i].y = 1024 * rand () / (RAND_MAX + 1.0f);
        cloud.points[i].z = 1024 * rand () / (RAND_MAX + 1.0f);
    }
 
    // Convert the cloud to ROS message
    pcl::toROSMsg(cloud, output);
    output.header.frame_id = "odom";
 
    ros::Rate loop_rate(1);
    while (ros::ok())
    {
        pcl_pub.publish(output);
        ros::spinOnce();
        loop_rate.sleep();
    }
 
    return 0;
}



















/**********************  在ROS上发布点云 PointClouds  *************************/

#include <ros/ros.h>
#include <sensor_msgs/PointCloud.h>

int main(int argc, char** argv)
{
	ros::init(argc, argv, "point_cloud_publisher");
	ros::NodeHandle n;
	
	ros::Publisher cloud_pub = n.advertise<sensor_msgs::PointCloud>("cloud", 50);
	unsigned int num_points = 100;
	
	ros::Rate r(1.0);
	
	while(n.ok())
	{
    	sensor_msgs::PointCloud cloud;
    	cloud.header.stamp = ros::Time::now();
    	cloud.header.frame_id = "sensor_frame";
    	cloud.points.resize(num_points);
    	
    	// we'll also add an intensity channel to the cloud
    	cloud.channels.resize(1);
    	cloud.channels[0].name = "rgb";
    	cloud.channels[0].values.resize(num_points);

	    // generate some fake data for our point cloud
	    
	    for(unsigned int i = 0; i < num_points; ++i)
	    {
		    cloud.points[i].x = 0.1*i;
		    cloud.points[i].y = 0.1*i;
		    cloud.points[i].z = 5;
		    cloud.channels[0].values[i] = 255;
	    }
    
    cloud_pub.publish(cloud);
    r.sleep();
  	
  	}
}












/****************  拼接点云 —————— 一起做RGBD SLAM  **********************
    > File Name: src/jointPointCloud.cpp
    > Author: Xiang gao
    > Mail: gaoxiang12@mails.tsinghua.edu.cn 
    > Created Time: 2015年07月22日 星期三 20时46分08秒
    > https://www.cnblogs.com/gaoxiang12/p/4669490.html
 ************************************************************************/

#include<iostream>
using namespace std;

#include "slamBase.h"

#include <opencv2/core/eigen.hpp>

#include <pcl/common/transforms.h>
#include <pcl/visualization/cloud_viewer.h>

#include <Eigen/Core>
#include <Eigen/Geometry>

int main( int argc, char** argv )
{
    //本节要拼合data中的两对图像
    ParameterReader pd;
    // 声明两个帧，FRAME结构请见include/slamBase.h
    FRAME frame1, frame2;
    
    //读取图像
    frame1.rgb = cv::imread( "./data/rgb1.png" );
    frame1.depth = cv::imread( "./data/depth1.png", -1);
    frame2.rgb = cv::imread( "./data/rgb2.png" );
    frame2.depth = cv::imread( "./data/depth2.png", -1 );

    // 提取特征并计算描述子
    cout << "extracting features" << endl;
    string detecter = pd.getData( "detector" );
    string descriptor = pd.getData( "descriptor" );

    computeKeyPointsAndDesp( frame1, detecter, descriptor );
    computeKeyPointsAndDesp( frame2, detecter, descriptor );

    // 相机内参
    CAMERA_INTRINSIC_PARAMETERS camera;
    camera.fx = atof( pd.getData( "camera.fx" ).c_str());
    camera.fy = atof( pd.getData( "camera.fy" ).c_str());
    camera.cx = atof( pd.getData( "camera.cx" ).c_str());
    camera.cy = atof( pd.getData( "camera.cy" ).c_str());
    camera.scale = atof( pd.getData( "camera.scale" ).c_str() );

    cout << "solving pnp" << endl;
    

    // 求解pnp——————此处开始转换过程
    RESULT_OF_PNP result = estimateMotion( frame1, frame2, camera );

    cout << result.rvec << endl << result.tvec << endl;

    // 处理result
    // 将旋转向量转化为旋转矩阵
    cv::Mat R;
    cv::Rodrigues( result.rvec, R );
    Eigen::Matrix3d r;
    cv::cv2eigen(R, r);
  
    // 将平移向量和旋转矩阵转换成变换矩阵
    Eigen::Isometry3d T = Eigen::Isometry3d::Identity();

    Eigen::AngleAxisd angle(r);
    cout << "translation" << endl;
    
    Eigen::Translation<double,3> trans(result.tvec.at<double>(0,0), result.tvec.at<double>(0,1), result.tvec.at<double>(0,2));
    T = angle;
    T(0,3) = result.tvec.at<double>(0,0); 
    T(1,3) = result.tvec.at<double>(0,1); 
    T(2,3) = result.tvec.at<double>(0,2);

    // 转换点云
    cout << "converting image to clouds" << endl;
    PointCloud::Ptr cloud1 = image2PointCloud( frame1.rgb, frame1.depth, camera );
    PointCloud::Ptr cloud2 = image2PointCloud( frame2.rgb, frame2.depth, camera );

    // 合并点云
    cout << "combining clouds" << endl;
    PointCloud::Ptr output (new PointCloud());
    pcl::transformPointCloud( *cloud1, *output, T.matrix() );
    *output += *cloud2;
    pcl::io::savePCDFile("data/result.pcd", *output);
    cout << "Final result saved." << endl;

    pcl::visualization::CloudViewer viewer( "viewer" );
    viewer.showCloud( output );
    while( !viewer.wasStopped() )
    {
        
    }
    return 0;
}